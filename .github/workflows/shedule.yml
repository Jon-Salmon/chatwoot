name: Build image on schedule

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:
  push:

env:
  SOURCE_REPO: chatwoot/chatwoot
  # GHCR_IMAGE_NAME: ghcr.io/your-org/your-image  # Replace with actual image

jobs:
  build-v4-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        dockerfile: ['community', 'enterprise']

    steps:
    - name: Checkout this repo
      uses: actions/checkout@v4

    - name: Get latest tag from source repo
      id: get_tag
      run: |
        TAGS=$(curl -s https://api.github.com/repos/${{ env.SOURCE_REPO }}/tags --header 'Bearer ${{ secrets.GITHUB_TOKEN }}')
        TAG=$(echo $TAGS | jq -r '.[0].name')
        COMMIT_URL=$(echo $TAGS | jq -r '.[0].commit.url')
        TAG_DATA=$(curl -s $COMMIT_URL --header 'Bearer ${{ secrets.GITHUB_TOKEN }}')
        COMMIT_DATE=$(echo "$TAG_DATA" | jq -r '.commit.committer.date')
        echo "Latest tag: $TAG"
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        echo "commit_date=$COMMIT_DATE" >> "$GITHUB_OUTPUT"

    - name: Check if tag is valid (starts with v4, old enough, and image missing)
      id: check_tag
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG: ${{ steps.get_tag.outputs.tag }}
        COMMIT_DATE: ${{ steps.get_tag.outputs.commit_date }}
      run: |
        set -e

        if [[ "$TAG" != v4* ]]; then
          echo "Tag $TAG does not start with v4. Skipping."
          exit 0
        fi

        echo "Image for $TAG does not exist. Checking age..."

        # Get commit date for tag

        COMMIT_TS=$(date -d "$COMMIT_DATE" +%s)
        NOW_TS=$(date +%s)
        AGE_DAYS=$(( (NOW_TS - COMMIT_TS) / 86400 ))

        echo "Tag is $AGE_DAYS days old"

        if [ "$AGE_DAYS" -gt 3 ]; then
          echo "should_build=true" >> "$GITHUB_OUTPUT"
        else
          echo "Tag $TAG is too recent (< 6 days)"
        fi

    # - name: Build and push Docker image
    #   if: steps.check_tag.outputs.should_build == 'true'
    #   env:
    #     TAG: ${{ steps.get_tag.outputs.tag }}
    #     IMAGE: ${{ env.GHCR_IMAGE_NAME }}
    #   run: |
    #     echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    #     docker build -t $IMAGE:$TAG --build-arg VERSION=$TAG .
    #     docker push $IMAGE:$TAG

    - name: Login to GHCR
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # - name: Build and push
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: ${{ github.event_name != 'pull_request' }}
    #     tags: ${{ steps.meta.outputs.tags }}
        # labels: ${{ steps.meta.outputs.labels }}

    - name: Build and Publish
      uses: docker/build-push-action@v5
      with:
        file: Dockerfile.${{ matrix.dockerfile }}
        platforms: linux/amd64
        push: true
        tags: |
          ghcr.io/jon-salmon/chatwoot:${{ matrix.dockerfile }}-${{ steps.get_tag.outputs.tag }}
          ghcr.io/jon-salmon/chatwoot:${{ matrix.dockerfile }}-latest
